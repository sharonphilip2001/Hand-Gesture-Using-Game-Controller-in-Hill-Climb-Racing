import cv2 as cv
import mediapipe as mp
from pynput.keyboard import Key, Controller

# Initialize Keyboard Controller
keyboard = Controller()

# Mediapipe Hand Module Setup
mp_draw = mp.solutions.drawing_utils
mp_hand = mp.solutions.hands

# Finger tip indices for thumb, index, middle, ring, and pinky
finger_tip_ids = [4, 8, 12, 16, 20]


def initialize_camera():
    """Initialize the camera feed."""
    video = cv.VideoCapture(0)
    if not video.isOpened():
        print("Error: Camera not accessible!")
        exit()
    return video


def detect_hand_landmarks(image, hand_detector):
    """Detect hand landmarks from the given frame."""
    image_rgb = cv.cvtColor(image, cv.COLOR_BGR2RGB)
    results = hand_detector.process(image_rgb)
    return results


def get_landmark_list(image, hand_landmarks):
    """Extract landmark coordinates from detected hand landmarks."""
    landmarks_list = []
    if hand_landmarks:
        for hand_lm in hand_landmarks:
            for index, lm in enumerate(hand_lm.landmark):
                h, w, _ = image.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                landmarks_list.append([index, cx, cy])
            # Draw landmarks on the hand
            mp_draw.draw_landmarks(image, hand_lm, mp_hand.HAND_CONNECTIONS)
    return landmarks_list


def count_fingers_open(landmarks_list):
    """Determine the number of open fingers based on landmarks."""
    if not landmarks_list:  # If no hand is detected, return None
        return None

    fingers_open = []
    for tip_id in finger_tip_ids:
        # Thumb comparison is different due to hand orientation
        if tip_id == 4:
            fingers_open.append(landmarks_list[tip_id][1] > landmarks_list[tip_id - 1][1])
        else:
            fingers_open.append(landmarks_list[tip_id][2] < landmarks_list[tip_id - 2][2])

    return fingers_open.count(1)


def control_game_action(fingers_count):
    """Control game actions based on the number of fingers open."""
    if fingers_count is None:
        print("NO HAND DETECTED - No action")
        return

    if fingers_count == 0:
        print("BRAKE - All fingers closed")
        keyboard.press(Key.left)
        keyboard.release(Key.right)
    elif fingers_count == 5:
        print("GAS - All fingers open")
        keyboard.press(Key.right)
        keyboard.release(Key.left)
    else:
        print("NEUTRAL - Some fingers open")
        keyboard.release(Key.right)
        keyboard.release(Key.left)


def main():
    video = initialize_camera()
    hand_detector = mp_hand.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5)

    while True:
        success, frame = video.read()
        if not success:
            print("Camera frame not available!")
            break

        results = detect_hand_landmarks(frame, hand_detector)
        hand_landmarks = results.multi_hand_landmarks

        landmarks_list = get_landmark_list(frame, hand_landmarks)

        if landmarks_list:  # Only process if a hand is detected
            count_fingers = count_fingers_open(landmarks_list)
            control_game_action(count_fingers)
        else:
            print("No hand detected, no action taken.")

        # Show the frame
        cv.imshow("Hill Climb Racing Controller - Sharon 6961", frame)

        # Close the video if "q" key is pressed
        if cv.waitKey(1) & 0xFF == ord('q'):
            break

    video.release()
    cv.destroyAllWindows()
 

if __name__ == "__main__":
    main()
    
